# -*- coding: utf-8 -*-
"""FORMULA _1_Analisis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gR3fHPZoLTbuTtIbr8-BtYIJ0V-GKgCm

# **ANALÍTICA DE FÓRMULA 1**

Una organización dedicada al análisis de deportes ha decidido centrarse en la Fórmula 1, con el objetivo de comprender mejor las tendencias y los factores que influyen en los resultados de las carreras. Como analista de datos, tu tarea es examinar los datos históricos de la Fórmula 1 y proporcionar insights a través de visualizaciones que respondan a las siguientes preguntas clave:

**Preguntas:**
---


1. ¿Cómo ha evolucionado el desempeño de los equipos principales (Mercedes, Red Bull, Ferrari) a lo largo de las últimas diez temporadas en términos de puntos obtenidos y posiciones finales en el campeonato de constructores?

2. ¿Cuál es la relación entre la clasificación en la parrilla de salida (posición en la qualy) y el resultado final de las carreras en los últimos cinco años?

3. Cual es el TOP 10 de Pilotos con mas podios

4. Top 10 Causas de Abandono en Carreras de Fórmula 1
"""

# Se realiza la importacion de las librerias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno

# Cargamos los diferentes conjuntos de datos CSV
circuitos = pd.read_csv('/content/circuits.csv', sep=',', header=0)
constructors_results = pd.read_csv('/content/constructor_results.csv', sep=',', header=0)
pilotos = pd.read_csv('/content/drivers.csv', sep=',', header=0)
pilotos_posicion = pd.read_csv('/content/driver_standings.csv', sep=',', header=0)
lap_time = pd.read_csv('/content/lap_times.csv', sep=',', header=0)
pit_stops = pd.read_csv('/content/pit_stops.csv', sep=',', header=0)
races = pd.read_csv('/content/races.csv', sep=',', header=0)
results = pd.read_csv('/content/results.csv', sep=',', header=0)
status = pd.read_csv('/content/status.csv', sep=',', header=0)

circuitos.head()

"""## 2. Análisis Exploratorio de Datos (EDA)

---

"""

## Realizamos una exploracion de nuestros datos
pilotos.info()

## Verificando la presencia de valores nulos en el dataset
pilotos.isnull().sum().sort_values(ascending=False)

# Buscar valores que contengan "\\N" en cada df
pilotos.isin(['\\N']).any()

"""Observamos que el data set contiene valores **NULOS**, sin embargo no esta asignado con **NaN**, se encuentran con la palabra **\\N** para remplazar los valores nulos

* Observamos que existe presencia de datos nulos.
* Tenemos que validar la relación que existen entre datos nulos.
* Se evaluará la posibilidad de eliminar ciertas filas que tengan presencia de valores nulos.

### 2.1.1 Remplazo de valores **\N** por valores NaN, en las columnas de los siguientes Data Sets
"""

# Craer una copia de los DF con los que vamos a trabajar
circuitos_df = circuitos.copy()
pilotos_df = pilotos.copy()
constructors_results_df = constructors_results.copy()
races_df = races.copy()
results_df = results.copy()

#Cambiar valores de la columna por valores NaN
pilotos_df['number'] = pilotos_df['number'].replace(['\\N'], np.nan)
pilotos_df['code'] = pilotos_df['code'].replace(['\\N'], np.nan)
circuitos_df['alt'] = circuitos_df['alt'].replace(['\\N'], np.nan)
# Lista de columnas donde se desea hacer el reemplazo
columns_to_replace = [
    'time','fp1_date', 'fp1_time', 'fp2_date', 'fp2_time',
    'fp3_date', 'fp3_time', 'quali_date', 'quali_time',
    'sprint_date', 'sprint_time']

# Reemplazar '\\N' por np.nan en las columnas especificadas
races_df[columns_to_replace] = races_df[columns_to_replace].replace('\\N', np.nan)

# Lista de columnas donde se desea hacer el reemplazo
columns_to_replace_1 = [
    'number', 'position', 'time', 'milliseconds',
    'fastestLap', 'rank', 'fastestLapTime', 'fastestLapSpeed']

# Reemplazar '\\N' por np.nan en las columnas especificadas
results_df[columns_to_replace_1] = results_df[columns_to_replace_1].replace('\\N', np.nan)

# Verificamos si se realizo el cambio de valores faltantes por "nan"
pilotos_df.isin(['\\N']).any()
circuitos_df.isin(['\\N']).any()
races_df.isin(['\\N']).any()
results_df.isin(['\\N']).any()

## Realizamos la suma de valores NaN en las columnas del Data SET
pilotos_df.isnull().sum().sort_values(ascending=False)
#circuitos_df.isnull().sum().sort_values(ascending=False)
#races_df.isnull().sum().sort_values(ascending=False)
#results_df.isnull().sum().sort_values(ascending=False)

## Mostrando visualmente la cantidad de nulos para cada variable, con respecto al total de datos
msno.bar(pilotos_df, color=sns.color_palette("inferno"),label_rotation=15)
plt.title('GRÁFICO DE BARRAS - VALORES NULOS', fontdict={'fontsize': 10, 'fontweight': 'bold', 'color': '#552E75'})
# plt.tight_layout()
plt.show()

"""### 2.1.2 Eliminando los Valores NULOS del DATA SET

Debido a la gran cantidad de valores faltantes en las columnas 'number' y 'code'. Se realiza la elimiacion de las columnas, debido a que no tienen relevacia en el analisis
"""

## Eliminamos la columna 'number' y 'code'
pilotos_df = pilotos_df.drop(columns= ['number', 'code'])
circuitos_df = circuitos_df.drop(columns= ['alt'])


pilotos_df.head()

#Validamos que no tenemos valores nulos
pilotos_df.isnull().sum()

""">* **No tenemos presencia de datos nulos en nuestro dataframe Limpio**

### 2.1.3 Tratamiento de Duplicados
"""

## Verificando presencia de duplicados en el dataframe original
pilotos_df.duplicated()

## Cantidad de datos duplicados en todo el dataframe original
pilotos_df.duplicated().sum()

"""Durante el analisis exploratorio de los DB, se observa que en **pilotos_df**, **circuitos_df**, **races_df**, **results_df** se encuentran datos faltantes en varias columnas, sin embargo no se va a relizar ningun tratamiento debido a que estos datos faltantes no representan revelancia durante el analisis que se va a realizar

# 3. Transformacion de datos
"""

#Realizamos una exploracion que el tipo de dato corresponda con las variables de las columnas
pilotos_df.info()
#circuitos_df.info()
#races_df.info()
#results_df.info()

"""### 3.1.2 Tratamiento de Valores Atípicos

---
"""

## Analizamos los valores estadísticos principales de nuestro dataframe
#pilotos_df.describe()
circuitos_df.describe()
#races_df.describe()
#results_df.describe()

"""Observamos que en DF de **circuitos_df** hay presentes numeros negativos que corresponder a la LATITUD y LONGITUD (ubicacion) lo cual es normal para determinar el lugar por medio de coordenadas"""



"""# PREGUNTAS

1. ¿Cómo ha evolucionado el desempeño de los equipos principales (Mercedes, Red Bull, Ferrari) a lo largo de las últimas diez temporadas en términos de puntos obtenidos y posiciones finales en el campeonato de constructores?
"""

# Filtrar datos relevantes para Mercedes, Red Bull y Ferrari
top_teams = ['Mercedes', 'Red Bull', 'Ferrari']
constructors_filtered = constructors[constructors['name'].isin(top_teams)]

# Merge para obtener datos completos
constructor_results_merged = pd.merge(constructors_filtered, constructor_standings, on='constructorId')
constructor_results_merged = pd.merge(constructor_results_merged, races, on='raceId')

# Filtrar por las últimas 10 temporadas
recent_seasons = constructor_results_merged['year'].max() - 10
constructor_results_last_10_seasons = constructor_results_merged[constructor_results_merged['year'] > recent_seasons]

# Agrupar por constructor y año para calcular los puntos y posiciones finales
performance_summary = constructor_results_last_10_seasons.groupby(['constructorRef', 'year']).agg({
    'points': 'sum',
    'position': 'min'
}).reset_index()

# Ordenar por año y posición
performance_summary = performance_summary.sort_values(by=['constructorRef', 'year'])

# Crear un gráfico de líneas para los puntos obtenidos
plt.figure(figsize=(7, 3.5))
sns.lineplot(data=performance_summary, x='year', y='points', hue='constructorRef', marker='o')
plt.title('Evolución de Puntos Obtenidos por Temporada')
plt.xlabel('Año')
plt.ylabel('Puntos')
plt.legend(title='Equipo')
plt.show()

# Crear un gráfico de líneas para las posiciones finales en el campeonato de constructores
plt.figure(figsize=(7, 3.5))
sns.lineplot(data=performance_summary, x='year', y='position', hue='constructorRef', marker='o')
plt.title('Evolución de Posiciones Finales en el Campeonato de Constructores')
plt.xlabel('Año')
plt.ylabel('Posición')
plt.gca().invert_yaxis()  # Invertir eje y para que 1 sea la posición más alta
plt.legend(title='Equipo')
plt.show()

"""2. ¿Cuál es la relación entre la clasificación en la parrilla de salida (posición en la qualy) y el resultado final de las carreras en los últimos cinco años?"""

# Filtrar por los últimos 5 años
recent_years = races['year'].max() - 5
races_last_5_years = races[races['year'] > recent_years]

# Merge para obtener datos completos de las posiciones de inicio y resultados finales
merged_data = pd.merge(results, races_last_5_years, on='raceId')

# Filtrar y seleccionar columnas relevantes
merged_data = merged_data[['raceId', 'driverId', 'grid', 'positionOrder', 'year']]
merged_data = merged_data.dropna(subset=['grid', 'positionOrder'])  # Eliminar filas con valores NaN

# Análisis de correlación
correlation = merged_data[['grid', 'positionOrder']].corr()

# Visualización de la relación
plt.figure(figsize=(10, 6))
sns.scatterplot(data=merged_data, x='grid', y='positionOrder', hue='year', palette='viridis', legend=None)
plt.title('Relación entre Posición en Qualy y Resultado Final (Últimos 5 años)')
plt.xlabel('Posición en Qualy')
plt.ylabel('Resultado Final')
plt.show()

# Mostrar correlación
print("Correlación entre Posición en Qualy y Resultado Final:")
print(correlation)

results.head()

"""Combinamos los Data Sets"""

# Combinar DataFrames con sufijos para evitar conflictos de nombres de columnas
results_pilotos = results.merge(pilotos, on='driverId', suffixes=('', '_piloto'))
results_pilotos_races = results_pilotos.merge(races, on='raceId', suffixes=('', '_race'))
results_pilotos_races_circuitos = results_pilotos_races.merge(circuitos, on='circuitId', suffixes=('', '_circuit'))
full_merge = results_pilotos_races_circuitos.merge(status, on='statusId', suffixes=('', '_status'))

# Combinar con 'lap_times', 'pit_stops', y 'driver_standings' si es necesario
full_merge = full_merge.merge(lap_time, on=['raceId', 'driverId'], how='left', suffixes=('', '_lap'))
full_merge = full_merge.merge(pit_stops, on=['raceId', 'driverId'], how='left', suffixes=('', '_pit'))
full_merge = full_merge.merge(pilotos_posicion, on=['driverId', 'raceId'], how='left', suffixes=('', '_pos'))

"""3. Cual es el TOP 10 de Pilotos con mas podios"""

# Filtrar para obtener los podios (top 3 posiciones)
podios = full_merge[full_merge['positionOrder'] <= 3]

# Contar los podios por piloto
podios_por_piloto = podios['driverId'].value_counts().reset_index()
podios_por_piloto.columns = ['driverId', 'podios']

# Obtener los nombres de los pilotos
podios_por_piloto = podios_por_piloto.merge(pilotos[['driverId', 'forename', 'surname']], on='driverId')
podios_por_piloto['nombre_completo'] = podios_por_piloto['forename'] + ' ' + podios_por_piloto['surname']

# Graficar los 10 pilotos con más podios
top_10_podios = podios_por_piloto.head(10)
plt.figure(figsize=(12, 6))
sns.barplot(data=top_10_podios, x='podios', y='nombre_completo')
plt.title('Top 10 Pilotos con Más Podios')
plt.xlabel('Número de Podios')
plt.ylabel('Piloto')
plt.show()

"""4. Cual es son las causas de abandono mas comunes en F1"""

# Combinar DataFrames para obtener la causa de abandono
abandonos_status = results.merge(status, on='statusId')

# Contar las causas de abandono y seleccionar el top 10
top_10_causas_abandono = abandonos_status['status'].value_counts().head(10)

# Mostrar el top 10 de causas de abandono
print("Top 10 Causas de Abandono en Carreras de Fórmula 1:")
print(top_10_causas_abandono)

# Graficar los resultados
plt.figure(figsize=(12, 6))
sns.barplot(x=top_10_causas_abandono.index, y=top_10_causas_abandono.values, palette='viridis')
plt.title('Top 10 Causas de Abandono en Carreras de Fórmula 1')

"""### Conclusiones

Este proyecto de análisis de datos de la Fórmula 1 proporciona una visión integral del rendimiento de equipos y pilotos a lo largo de las últimas temporadas. Utilizando diversas fuentes de datos y técnicas analíticas, hemos logrado extraer insights clave sobre varios aspectos del deporte:

1. **Evolución del Desempeño de los Equipos Principales:** Hemos visualizado cómo los equipos Mercedes, Red Bull y Ferrari han evolucionado en términos de puntos obtenidos y posiciones finales en el campeonato de constructores durante las últimas diez temporadas. Esto nos ha permitido identificar tendencias y dominancia de ciertos equipos en distintos períodos.

2. **Relación entre Clasificación y Resultado Final:** El análisis de la relación entre la posición de salida en las clasificaciones y los resultados finales de las carreras en los últimos cinco años ha revelado una correlación que puede ser utilizada para predecir el desempeño en las carreras basándose en las sesiones de clasificación.

3. **Impacto de los Abandonos (DNF):**  Analizamos la frecuencia y el impacto de los abandonos en el rendimiento de equipos y pilotos. Los resultados muestran cómo los abandonos afectan significativamente la tasa de éxito de los equipos en el campeonato.

4. **Mejora en el Rendimiento de los Pilotos:**  Identificamos qué pilotos han mostrado la mayor mejora, en términos de puntos obtenidos, podios y victorias. Este análisis destaca a los pilotos que han desarrollado significativamente sus habilidades y rendimiento a lo largo de sus carreras.
"""